package com.google.sticknotesbackend.servlets;

import static com.google.common.truth.Truth.assertThat;
import static com.googlecode.objectify.ObjectifyService.ofy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import com.google.appengine.tools.development.testing.LocalMemcacheServiceTestConfig;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import com.google.cloud.NoCredentials;
import com.google.cloud.ServiceOptions;
import com.google.cloud.datastore.Datastore;
import com.google.cloud.datastore.DatastoreOptions;
import com.google.gson.JsonObject;
import com.google.sticknotesbackend.models.User;
import com.google.sticknotesbackend.models.Whiteboard;
import com.googlecode.objectify.ObjectifyFactory;
import com.googlecode.objectify.ObjectifyService;
import com.googlecode.objectify.util.Closeable;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

/**
 * Unit tests for BoardServlet.
 */
@RunWith(JUnit4.class)
public class BoardServletTest {
  private final int CREATED = 204;
  private final int BAD_REQUEST = 400;
  // Set up a helper so that the ApiProxy returns a valid environment for local testing.
  private final LocalServiceTestHelper helper =
      new LocalServiceTestHelper(new LocalMemcacheServiceTestConfig(), new LocalDatastoreServiceTestConfig());
  private Closeable session;

  @Mock private HttpServletRequest mockRequest;
  @Mock private HttpServletResponse mockResponse;
  private StringWriter responseWriter;
  private BoardServlet boardServlet;

  @BeforeClass
  public static void setUpBeforeClass() {
    // necessary setup to make Obejctify work
    DatastoreOptions options = DatastoreOptions.newBuilder()
            .setProjectId("dummy")
            .setHost("localhost:8081")
            .setCredentials(NoCredentials.getInstance())
            .setRetrySettings(ServiceOptions.getNoRetrySettings())
            .build();
    Datastore datastore = options.getService();
    ObjectifyService.init(new ObjectifyFactory(datastore));
    ObjectifyService.register(Whiteboard.class);
    ObjectifyService.register(User.class);
  }

  @Before
  public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
    helper.setUp();
    session = ObjectifyService.begin();
    ObjectifyService.register(Whiteboard.class);
    // Set up a fake HTTP request
    when(mockRequest.getContentType()).thenReturn("application/json");
    // Set up a fake HTTP response
    responseWriter = new StringWriter();
    when(mockResponse.getWriter()).thenReturn(new PrintWriter(responseWriter));
    boardServlet = new BoardServlet();
  }

  @After
  public void tearDown() {
    session.close();
    helper.tearDown();
  }

  @Test
  public void testBoardCreateSuccessWithValidPayload() throws Exception {
    // create mocked request
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("title", "Board title");
    when(mockRequest.getReader()).thenReturn(new BufferedReader(new StringReader(jsonObject.toString())));

    boardServlet.doPost(mockRequest, mockResponse);
    // verify response status
    verify(mockResponse).setStatus(CREATED);
    assertThat(mockResponse.getWriter().toString().contains("Board title"));
  }

  @Test
  public void testBoardRetrieveSuccessWithValidBoardId() throws Exception {
    // create board firstly
    Whiteboard board = getMockBoard();
    // when the board is saved, get the auto generated id and assign to board field
    board.id = ofy().save().entity(board).now().getId();
    // mock request get parameter
    when(mockRequest.getParameter("id")).thenReturn(Long.toString(board.id));

    boardServlet.doGet(mockRequest, mockResponse);
    String responseString = mockResponse.getWriter().toString();
    // check if the response is exactly the same as generated by Gson.toJson(board)
    assertThat(responseString.equals(boardServlet.getBoardGsonParser().toJson(board)));
  }

  @Test
  public void testBoardEditSuccessWithValidPayload() throws Exception {
    String newBoardTitle = "New board title";
    // create board firstly
    Whiteboard board = getMockBoard();
    // when the board is saved, get the auto generated id and assign to board field
    board.id = ofy().save().entity(board).now().getId();
    // mock request get parameter
    when(mockRequest.getParameter("id")).thenReturn(Long.toString(board.id));
    // mock request payload
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("title", newBoardTitle);
    when(mockRequest.getReader()).thenReturn(new BufferedReader(new StringReader(jsonObject.toString())));

    boardServlet.doPatch(mockRequest, mockResponse);
    String responseString = mockResponse.getWriter().toString();
    // check if new board title is in the response
    assertThat(responseString.contains(newBoardTitle));
    // check if datastore entity really updated
    Whiteboard storedBoard = ofy().load().type(Whiteboard.class).id(board.id).now();
    assertThat(storedBoard.title.equals(newBoardTitle));
  }

  @Test
  public void testBoardRetrieveFailsWithUnexistingId() throws IOException {
    // create board entity
    Whiteboard board = getMockBoard();
    // when the board is saved, get the auto generated id and assign to board field
    board.id = ofy().save().entity(board).now().getId();
    // call get with board.id + 1
    // mock request get parameter
    when(mockRequest.getParameter("id")).thenReturn(Long.toString(board.id + 1));
    
    boardServlet.doGet(mockRequest, mockResponse);
    // check that bad request error was generated
    verify(mockResponse).sendError(BAD_REQUEST);
  }

  @Test
  public void testBoardEditFailsWithUnexistingId() throws IOException {
    // create board entity
    Whiteboard board = getMockBoard();
    // when the board is saved, get the auto generated id and assign to board field
    board.id = ofy().save().entity(board).now().getId();
    // call get with board.id + 1
    // mock request get parameter
    when(mockRequest.getParameter("id")).thenReturn(Long.toString(board.id + 1));
    
    boardServlet.doPatch(mockRequest, mockResponse);
    // check that bad request error was generated
    verify(mockResponse).sendError(BAD_REQUEST);
  }

  @Test
  public void testBoardEditFailsWithInvalidPayload() throws Exception {
    String newBoardTitle = "New board title";
    // create board firstly
    Whiteboard board = getMockBoard();
    // when the board is saved, get the auto generated id and assign to board field
    board.id = ofy().save().entity(board).now().getId();
    // mock request get parameter
    when(mockRequest.getParameter("id")).thenReturn(Long.toString(board.id));
    // mock request payload
    JsonObject jsonObject = new JsonObject();
    // set unexisting property "newTitle"
    jsonObject.addProperty("newtTitle", newBoardTitle);
    when(mockRequest.getReader()).thenReturn(new BufferedReader(new StringReader(jsonObject.toString())));
    
    boardServlet.doPatch(mockRequest, mockResponse);
    // check that bad request error was generated
    verify(mockResponse).sendError(BAD_REQUEST);
  }

  // helper method that constructs a testing object of Whiteboard
  private Whiteboard getMockBoard() {
    Whiteboard board = new Whiteboard("test");
    board.creationDate = System.currentTimeMillis();
    // create dummy user and set this user as a creator of the board
    board.setCreator(ofy().save().entity(new User("randomid", "googler@google.com", "nickname")).now());
    board.rows = 4;
    board.cols = 6;
    return board;
  }
}
