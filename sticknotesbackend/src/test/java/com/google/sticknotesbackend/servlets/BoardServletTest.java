package com.google.sticknotesbackend.servlets;

import static com.google.common.truth.Truth.assertThat;
import static com.googlecode.objectify.ObjectifyService.ofy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.google.gson.JsonObject;
import com.google.sticknotesbackend.models.Whiteboard;
import com.googlecode.objectify.ObjectifyService;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/**
 * Unit tests for BoardServlet.
 */
@RunWith(JUnit4.class)
public class BoardServletTest extends NotesboardTestBase {
  private BoardServlet boardServlet;
  
  @BeforeClass
  public static void setUpBeforeClass() {
    // call objectify initialization
    NotesboardTestBase.initializeObjectify();
    
  }

  @Before
  public void setUp() throws Exception {
    // parent logic of setting up objectify
    super.setUp();

    // local test logic
    ObjectifyService.register(Whiteboard.class);
    // Set up a fake HTTP request
    when(mockRequest.getContentType()).thenReturn("application/json");
    // Set up a fake HTTP response
    responseWriter = new StringWriter();
    when(mockResponse.getWriter()).thenReturn(new PrintWriter(responseWriter));
    boardServlet = new BoardServlet();
  }

  @After
  public void tearDown() {
    super.tearDown();    
  }

  @Test
  public void testBoardCreateSuccessWithValidPayload() throws Exception {
    // create mocked request
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("title", "Board title");
    when(mockRequest.getReader()).thenReturn(new BufferedReader(new StringReader(jsonObject.toString())));

    boardServlet.doPost(mockRequest, mockResponse);
    // verify response status
    verify(mockResponse).setStatus(CREATED);
    assertThat(mockResponse.getWriter().toString().contains("Board title"));
  }

  @Test
  public void testBoardRetrieveSuccessWithValidBoardId() throws Exception {
    // create board firstly
    Whiteboard board = getMockBoard();
    // when the board is saved, get the auto generated id and assign to board field
    board.id = ofy().save().entity(board).now().getId();
    // mock request get parameter
    when(mockRequest.getParameter("id")).thenReturn(Long.toString(board.id));

    boardServlet.doGet(mockRequest, mockResponse);
    String responseString = mockResponse.getWriter().toString();
    // check if the response is exactly the same as generated by Gson.toJson(board)
    assertThat(responseString.equals(boardServlet.getBoardGsonParser().toJson(board)));
  }

  @Test
  public void testBoardRetrieveFailsWithUnexistingId() throws IOException {
    // create board entity
    Whiteboard board = getMockBoard();
    // when the board is saved, get the auto generated id and assign to board field
    board.id = ofy().save().entity(board).now().getId();
    // call get with board.id + 1
    // mock request get parameter
    when(mockRequest.getParameter("id")).thenReturn(Long.toString(board.id + 1));
    
    boardServlet.doGet(mockRequest, mockResponse);
    // check that bad request error was generated
    verify(mockResponse).sendError(BAD_REQUEST);
  }
}
